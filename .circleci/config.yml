version: 2.1

orbs:
  slack: circleci/slack@4.10.1
commands:

  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: dot-net
          template: basic_fail_1

  install_awscli:
      description: Install AWS CLI v2 
      steps:
        - run:
            name: Install AWS CLI v2  
            command: |              
              sudo apt-get update && sudo apt-get install
              sudo apt-get install -y tar gzip curl
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs          

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
     # Add parameter here 
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:8}"
        type: string     
        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroy environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >> 
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:8}"
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${kvdb}/migration_<< parameters.workflow_id >>)            
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
# build-frontend and install dependencies 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  #build-backend and install dependencies
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
         name: run the unit tests for frontend
         command: |
           cd frontend
           npm install
           npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend  
      - notify_on_failure    

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: run the unit tests for backend 
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend         
      - notify_on_failure


  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: run scan for frontend 
          command: |
            cd frontend
            npm install
            npm audit fix --force
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
      - notify_on_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: run scan for backend 
          command: |
            cd backend
            npm install
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend      
      - notify_on_failure


  deploy-infrastructure:
    docker:      
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      # - run:
      #     name: Install dependencies
      #     command: |
      #       yum install tar gzip curl -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}" 
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"  
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/workflow_id.txt

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}      
      - notify_on_failure
       # Here's where you will add some code to rollback on failure      


  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["73:ae:da:37:29:e9:84:af:1d:34:95:44:de:78:e1:9f"]
      - attach_workspace:
          at: ~/ 
      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt 
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8} 
      - notify_on_failure

 

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install        
            npm run migrations > migrations_dump.txt
    
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend      
      - run:
          name: Send migration results to kvdb.io
          command: |
            echo https://kvdb.io/${kvdb}/migration_${CIRCLE_WORKFLOW_ID:0:8}
            if grep -q "has been excuted successfully." ~/project/backend/migration_dump.txt
            then 
              curl https://kvdb.io/${kvdb}/migration_${CIRCLE_WORKFLOW_ID:0:8} -d '1'
            else
              echo "No migrations are pending" 
            fi 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}  
      - notify_on_failure

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8} 
      - notify_on_failure    



  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["73:ae:da:37:29:e9:84:af:1d:34:95:44:de:78:e1:9f"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - notify_on_failure  



  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Back-end smoke-test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text)
            export API_URL=http://${BACKEND_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Front-end smoke-test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:8}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - notify_on_failure   
  
  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${kvdb}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:8}" \
              --stack-name InitialStack
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - notify_on_failure  
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${kvdb}/old_workflow_id)
            # echo Old Workflow ID: $OldWorkflowID 
            echo  "${OldWorkflowID}"
            echo  Old Workflow ID: $OldWorkflowID 
            echo  "${OldWorkflowID}"

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              echo "-------------------------------Delete Confirmed----------------------------------------------"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "-------------------------------Cannot Cleanup-------------------------------------------------"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - notify_on_failure  



 
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:  
          event: pass
          channel: dot-net
          template: basic_success_1
        

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      - notify_on_success:
           requires: [build-frontend,build-backend,test-frontend, test-backend, scan-frontend, scan-backend,deploy-infrastructure,configure-infrastructure,run-migrations,deploy-backend, deploy-frontend,smoke-test,cloudfront-update]