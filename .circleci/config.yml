version: 2.1

orbs:
  slack: circleci/slack@4.10.1
commands:
  install_awscli:
      description: Install AWS CLI v2 
      steps:
        - run:
            name: Install AWS CLI v2  
            command: |
              sudo apt-get update && sudo apt-get install
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
     # Add parameter here 
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:8}"
        type: string     
        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroy environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-back-end-<< parameters.workflow_id >> 
            aws cloudformation delete-stack --stack-name udapeople-front-end-<< parameters.workflow_id >>


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:8}"
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/TSed8mEd6Mqz45S4uLkB7n/migration_<< parameters.workflow_id >>)
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd backend
              # npm install
              npm run migration:revert
            fi
# build-frontend and install dependencies        
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  #build-backend and install dependencies
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build



  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
         name: run the unit tests for frontend
         command: |
           cd frontend
           npm install
           npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend  

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: run the unit tests for backend 
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend         

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: run scan for frontend 
          command: |
            cd frontend
            npm install
            npm audit fix --force
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: run scan for backend 
          command: |
            cd backend
            npm install
            npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend      

  deploy-infrastructure:
    docker:      
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install tar gzip curl -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:8} \
              --stack-name udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}" 
             
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-front-end-${CIRCLE_WORKFLOW_ID:0:8} \
              --stack-name udapeople-front-end-${CIRCLE_WORKFLOW_ID:0:8} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:8}"  
            
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}      
      # Here's where you will add some code to rollback on failure      



  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["f9:0f:73:86:1e:3a:48:58:bd:78:6b:15:d6:5a:6e:3e"]          
  #     - attach_workspace:
  #         at: ~/

  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible tar gzip
  #           pip install awscli
  #           aws --version

  #     - run:
  #         name: configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml

  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}   

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["f9:0f:73:86:1e:3a:48:58:bd:78:6b:15:d6:5a:6e:3e"]
      - attach_workspace:
          at: ~/ 
      - install_awscli    
      # - run: 
      #     name: Install dependencies
      #     command: |
      #       sudo apt install -y tar gzip curl
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip -qq awscliv2.zip
      #       sudo ./aws/install
      #       echo "install dependancies Done"
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt 
            ansible-playbook -i inventory.txt configure-server.yml 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8} 


  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/.circleci/ansible/inventory.txt
  #     - install_awscli    
  #     # - run:
  #     #     name: Install AWS CLI dependencies
  #     #     command: |
  #     #       sudo apt-get update && sudo apt-get install -yy less
  #     #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #     #       unzip awscliv2.zip
  #     #       sudo ./aws/install
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install
  #           # Run and save the migration output
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io OR memstash.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then              
  #             curl https://kvdb.io/TSed8mEd6Mqz45S4uLkB7n/migration_${CIRCLE_WORKFLOW_ID:0:8}  -d '1'
  #           fi 
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}     
      # Here's where you will add some code to rollback on failure      
  
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/.circleci/ansible/inventory.txt
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${kvdb}/migration_${CIRCLE_WORKFLOW_ID:0:8}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}  
      # - revert-migrations


  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/.circleci/ansible/inventory.txt
      - install_awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:8}" \
              --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:8}".tar.gz dist
            aws s3 cp dist s3://udapeoplefrontend${CIRCLE_WORKFLOW_ID:0:8} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8} 


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout 
      - add_ssh_keys: 
          fingerprints: ["f9:0f:73:86:1e:3a:48:58:bd:78:6b:15:d6:5a:6e:3e"]
      - attach_workspace:
          at: ~/.circleci/ansible/inventory.txt      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl tar gzip openssh nodejs npm            
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vv 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
        
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            



workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]