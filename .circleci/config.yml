version: 2.1

orbs:
  slack: circleci/slack@4.10.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
     # Add parameter here 
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string     
        
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroy environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >> 
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: dot-net
          template: basic_fail_1

  install_awscli:
      description: Install AWS CLI v2 
      steps:
        - run:
            name: Install AWS CLI v2  
            command: |              
              sudo apt-get update && sudo apt-get install
              sudo apt-get install -y tar gzip curl
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs          

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    parameters:
      workflow_id:
        type: string
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/VRk3WeX9qUn7hEfaC2v2Dt/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build    
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure      

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test 
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend  
      - notify_on_failure   



  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test 
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend         
      - notify_on_failure      
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: scan frontend 
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend
      - notify_on_failure


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: scan backend 
          command: |
            cd backend
            npm install
            npm audit fix 
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend      
      - notify_on_failure


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"            
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
              echo `cat .circleci/ansible/inventory.txt`

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      
      - notify_on_failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["32:a4:19:29:b4:49:ad:64:72:5d:b3:02:af:81:b2:52"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update --no-cache python3 py3-pip
            /usr/local/bin/python -m pip install --upgrade pip
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml     
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - notify_on_failure
      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout      
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install 
            npm run migrations > migrations_dump.txt
            
      - run:
          name: Send migration status to kvdb.io
          command: |   
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl --insecure https://kvdb.io/VRk3WeX9qUn7hEfaC2v2Dt/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
           
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      - notify_on_failure

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout 
      - install_awscli
      - install_nodejs
      # - run:
      #     name: Install dependencies
      #     command: |
      #       sudo apt update && sudo apt upgrade
      #       sudo apt-get install python python-pip 
      #       sudo pip install awscli 
      #       python -m pip install --user ansible
      #       npm install
      #       sudo apt-get install curl
      #       sudo apt-get install tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances 
            --query 'Reservations[*].Instances[*].PublicIpAddress' 
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" 
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"          
            echo "API_URL = $API_URL"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env   
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - notify_on_failure  

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["32:a4:19:29:b4:49:ad:64:72:5d:b3:02:af:81:b2:52"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - notify_on_failure  


  
  smoke-test:
      docker:
        - image: python:3.7-alpine3.11 
      steps:
        - checkout
        - run:
            name: Install dependencies
            command: |
              apk add --update nodejs npm curl
              apk add --update --no-cache python3 py3-pip
              /usr/local/bin/python -m pip install --upgrade pip
              pip install awscli
              aws --version
        - run:
            name: Get backend url
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances 
              --query 'Reservations[*].Instances[*].PublicIpAddress' 
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --output text)
        - run:
            name: Backend smoke test.
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances 
              --query 'Reservations[*].Instances[*].PublicIpAddress' 
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" 
              --output text)
              echo "BACKEND_IP=${BACKEND_IP}"
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL=${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
        - run:
            name: Frontend smoke test.
            command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
              
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - notify_on_failure
                  
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip awscli curl npm nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text > ~/OldWorkflowID.txt
     
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
      - persist_to_workspace:
          root: ~/
          paths: 
            - OldWorkflowID.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - notify_on_failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Fetch old stack workflow id
          command: |
            export OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo $OldWorkflowID 

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "-----------------------Delete Confirmed------------------------"
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" 
            else
              echo "------------------------Cannot Cleanup-------------------------"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:8}
      - notify_on_failure  

  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:  
          event: pass
          channel: dot-net
          template: basic_success_1    
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
      - notify_on_success:
           requires: [build-frontend,build-backend,test-frontend, test-backend, scan-frontend, scan-backend,deploy-infrastructure,configure-infrastructure,run-migrations,deploy-backend, deploy-frontend,smoke-test,cloudfront-update]